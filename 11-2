import java.util.Scanner;

class Matrix {
    private int[][] matrix;
    private int rows, cols;

    public Matrix(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        matrix = new int[rows][cols];
    }

    public void setMatrix(Scanner sc) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
    }

    public synchronized void displayMatrix() {
        System.out.println("Matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    public synchronized void displayTranspose() {
        System.out.println("Transpose:");
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                System.out.print(matrix[j][i] + " ");
            }
            System.out.println();
        }
    }

    public synchronized void displayMaxValue() {
        int max = matrix[0][0];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (matrix[i][j] > max) {
                    max = matrix[i][j];
                }
            }
        }
        System.out.println("Max value: " + max);
    }

    public synchronized void displayPrincipalDiagonal() {
        System.out.println("Principal diagonal:");
        for (int i = 0; i < Math.min(rows, cols); i++) {
            System.out.print(matrix[i][i] + " ");
        }
        System.out.println();
    }

    public synchronized void displayNonDiagonal() {
        System.out.println("Non-diagonal elements:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (i != j) {
                    System.out.print(matrix[i][j] + " ");
                }
            }
        }
        System.out.println();
    }
}

public class Question2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Enter the number of rows and columns:");
        int rows = sc.nextInt();
        int cols = sc.nextInt();

        Matrix matrix = new Matrix(rows, cols);
        
        System.out.println("Enter the elements of the matrix:");
        matrix.setMatrix(sc);

        Thread t1 = new Thread(() -> matrix.displayMatrix());
        Thread t2 = new Thread(() -> matrix.displayTranspose());
        Thread t3 = new Thread(() -> matrix.displayMaxValue());
        Thread t4 = new Thread(() -> matrix.displayPrincipalDiagonal());
        Thread t5 = new Thread(() -> matrix.displayNonDiagonal());

        // Starting threads
        t1.start();
        try { t1.join(); } catch (InterruptedException e) { e.printStackTrace(); }

        t2.start();
        try { t2.join(); } catch (InterruptedException e) { e.printStackTrace(); }

        t3.start();
        try { t3.join(); } catch (InterruptedException e) { e.printStackTrace(); }

        t4.start();
        try { t4.join(); } catch (InterruptedException e) { e.printStackTrace(); }

        t5.start();
        try { t5.join(); } catch (InterruptedException e) { e.printStackTrace(); }

        sc.close();
    }
}
